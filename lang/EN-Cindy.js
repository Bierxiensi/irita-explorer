export const ExplorerLang = {
    common:{
        allTxStatus:'All Status',
        success:'Success',
        failed:'Failed',
        allTxType:'All TxType',
        selectDate:'Select Date',
        copied:'Copied',
        copyFailed:'Failed',
        all:'All',
    },
    table:{
        emptyDescription:'- No Data -',
        block: 'Block',
        transactions: 'Transactions',
        timestamp: 'Timestamp',
        age: 'Age',
        txHash: 'TxHash',
        txType: 'TxType',
        from: 'From',
        to: 'To',
        signer: 'Signer',
        txTimestamp: 'Timestamp',
        requestId: 'Request Id',
        number:'#',
        name: 'Moniker',
        operator: 'Operator',
        votingPower: 'Voting Power',
        pubKey: 'PubKey',
        denom: 'Denom',
        owner: 'Owner',
        id: 'NFT Id',
        data: 'Data',
        uri: 'Uri',
        serviceName: 'Service Name',
        provider:'Provider',
        respondTimes:'Respond Times',
        isAvailable:'Is Available',
        price:'Cost Per Call',
        minBlock:'Minimum Response Time',
        bindTime:'Bind Time',
        disabledTime: 'Disabled Time',
        respondHash:'Respond Hash',
        consumer:'Consumer:',
        requestHash:'Request Hash',
        requestStatus:'Request Status',
        deposit: 'Deposit',
        createHash:'TxHash',
        nftCount:'NFT',
        creator:'Creator',
        createTime:'Timestamp',
    },
    unit:{
        providers:'providers',
        time:'Time',
        blocks:'Blocks',
        totalRespond:'Total${%value%}Responds',
        Txs:'Txs',
        second:'Second',
    },
    message:{
        requestFailed:'Failed to get data, please try again later',
    },
    Navigation:{
        block: 'Blockchain',
        transactions: 'Transactions',
        validators: 'Validators',
        nftAsset: 'NFT',
        denoms: 'Denom',
        service: 'iService',
        searchPlaceHolder: 'Search by Address / Txhash / Block / HashLock',
    },
    home:{
        blockHeight: 'Block Height',
        transactions: 'Transactions',
        avgBlockTime: 'Avg Block Time',
        last100Blocs: 'Last 100 Blocks',
        validators: 'Validators',
        services: 'iService',
        assets: 'NFT',
        blocks: 'Blocks',
        viewAll: 'View All',
        listTransactions: 'Transactions',
        tx:'TX#',
        txn:'Txn'
    },
    block:{
        currentHeight: 'Current Height',
    },
    blockDetail:{
        blockHash: 'Block Hash:',
        transaction: 'Transactions:',
        timestamp: 'Timestamp:',
        transactions: 'Transactions',
    },
    transactions:{
        txs: 'Txs',
        search: 'Search',
        status: ' Status',
    },
    validators:{
        bonded:'Active',
        unbonding:'Candidate',
        unbonded:'Jailed',
    },
    nftAsset:{
        assets: 'NFT',
        search: 'Search',
        placeHolder: 'Search by NFT Id',
    },
    denom:{
        title: 'Denom',
        search: 'Search',
        placeHolder: 'Search by Denom',
    },
    service: {
        services: 'iService List',
        from: 'From',
        description: 'Description',
        status: 'Status',
        placeHolder:'Search by iService Name or Description',
        serviceCount:' Services',
    },
    transactionInformation:{
        transactionInformation: 'Transaction Details',
        baseInfo:'Base Info',
        txHash: 'TxHash',
        blockHeight: 'Block',
        status: 'Status',
        timestamp: 'Timestamp',
        signer: 'Signer',
        memo: 'Memo',
        transactionMessage: 'Transaction Message or Result',
        relevanceTx:'Related Transaction',
        txType: 'TxType',
        denomId: 'Denom Id',
        denomName: 'Denom Name',
        from: '  From',
        to: 'To',
        consumer: 'Consumer',
        provider: 'Provider',
        repeatedFrequency: 'Repeated Frequency',
        repeatedTotal: 'Repeated Total',
        serviceFeeCap: 'Service Fee Cap',
        timeOut: 'Timeout',
        serviceName: 'Service Name',
        requestContextId: 'Request Id',
        pricing: 'Cost Per Call',
        owner: 'Owner',
        qos: 'Minimum Response Time',
        deposit: 'Deposit',
        nftId: 'NFT Id',
        nftName: 'NFT Name',
        data: 'Data',
        uri: 'Uri',
        issueDenom:{
            schema: 'Schema',
            sender: 'Sender',
        },
        send:{
            amount: 'Amount',
        },
        createRecord:{
            contents:'Contents',
        },
        callService: {
            input: 'Input',
            repeated: 'Repeated',
            superMode: 'SuperMode',
        },
        respondService:{
            output: 'Output:',
            requestId: 'Request Id',
            result: 'Result',
        },
        defineService: {
            description: 'Description',
            tags: 'Tags',
            author: 'Author',
            authorDescription: 'Author Description',
            schemas:'Schemas',
        },
    },
    addressDetail: {
        addressDetail:'Address Details',
        txRecord:'Txs',
        consumerTitle:'iService-As Consumer',
        providerTitle:'iService-As Provider',
        respondRecord:'Respond Record',
        assets: 'NFT',
    },
    nftDetail: {
        nftInformation:'NFT Details',
        owner: 'Owner',
        denom: 'Denom',
        id: 'NFT Name',
        schema: 'Schema',
        data: 'Data',
        creator: 'Creator',
        uri: 'Uri',
        nftTxs: 'Txs',
    },
    serviceDetail: {
        serviceDefinition: 'iService Details',
        primary: 'Base Info',
        author: 'Author',
        authorDescription: 'Author Description',
        description: 'Description',
        name: 'Name',
        schema: 'Schema',
        tags: 'Tags',
        serviceBindings: {
            serviceBindings: 'Service Binding',
            providers: 'Providers',
            deposit: 'Deposit',
            owner: 'Owner',
            pricing: 'Cost Per Call',
            qos: 'Minimum Response Time',
            bindTime: 'Bind Time',
            disabledTime: 'Disabled Time',
            hash:'Bind Details',
        },
        serviceTransactions: 'iService Transactions',
        hash:'Define Details',
        height:'Define Block',
        time:'Define Time',
        respondRecord:'iService Respond Record',
        provider:'Provider',
        txRecord:'Respond Record',
    },
    searchResult:{
        title: 'Search Results',
        backHome: 'Back Home',
        resultTitle: 'There is no valid result.',
        searchTip: 'Try to search with Address, Transaction, Block Number, Proposal ID, HashLock.',
    }
}